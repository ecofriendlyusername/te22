package com.example.myStocks;

import java.math.BigDecimal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import antlr.collections.List;

// @RestConller // very different from just @Controller!
@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  @Autowired
  private OwnedStockRepository osRepository;

  @PostMapping(path="/buyStock") // Map ONLY POST Requests
  public @ResponseBody String buyStock (@RequestParam String email
      , @RequestParam String ticker, @RequestParam BigDecimal price, @RequestParam int amount) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	  
     if (!userRepository.existsByEmail(email)) {
    	 return "User does not exist";
    } else { 
    	User u = userRepository.findByEmail(email);
    	if (osRepository.existsByUser_idAndTicker(u.getId(), ticker)) {
    		OwnedStock os = osRepository.findByUser_idAndTicker(u.getId(), ticker);
    		os.setAvg_bprice(price, amount);
    		os.setUntilNow(amount);
    		os.setStockbalance(amount, true);
    		userRepository.save(u);
    	} else {
    		OwnedStock os = new OwnedStock(ticker, price, amount, u);
    		u.getOwnedStocks().add(os);
    		os.setUser(u);
    		userRepository.save(u);
    	}
    }
    return "Saved!";
  }
  
  @PostMapping(path="/sellStock") // Map ONLY POST Requests
  public @ResponseBody String sellStock (@RequestParam String email
      , @RequestParam String ticker, @RequestParam BigDecimal price, @RequestParam int amount) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	  
     if (!userRepository.existsByEmail(email)) {
    	 return "User does not exist";
    } else { 
    	User u = userRepository.findByEmail(email);
    	if (osRepository.existsByUser_idAndTicker(u.getId(), ticker)) {
    		OwnedStock os = osRepository.findByUser_idAndTicker(u.getId(), ticker);
    		if (os.getStock_balance() < amount)
    			return "You do not have enough stocks";
    		else if (os.getStock_balance() == amount) {
    			u.getOwnedStocks().remove(os);
    			osRepository.delete(os);
    			userRepository.save(u);
    			return "You sold all";
    		} else {
    			os.setStockbalance(amount, false);
    		}
    		u.getOwnedStocks().add(os);
    		os.setUser(u);
    		userRepository.save(u);
    	} else {
    		return "User does not have this stock";
    	}
    }
    return "Saved!";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}
